{"version":3,"sources":["components/signup.tsx","components/password.tsx","App.js","components/notfound.tsx","serviceWorker.js","index.js"],"names":["Signup","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleClick","bind","assertThisInitialized","react_default","a","createElement","Button","onClick","disabled","assigned","name","e","handleSignup","code","React","Component","Password","mode","roomName","playerName","listOfNames","playerOrder","socket","socketIOClient","handlePerson","emit","room","setState","roomCreated","Form","Label","className","signup","color","_","roomEnter","type","value","onChange","handlePlayer","handleRoom","handleSubmit","event","target","_this2","on","details","console","log","prevState","objectSpread","defineProperty","App","components_password","NotFound","Boolean","window","location","hostname","match","routing","react_router_dom","react_router","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.93d7fd98.chunk.js","sourcesContent":["import React from \"react\"\nimport Button from \"react-bootstrap/Button\"\n\nexport interface SignupProps {\n  name: string\n  color: string\n  code: string\n  handleSignup: any\n  assigned: boolean\n}\n\nexport interface SignupState {}\n\nclass Signup extends React.Component<SignupProps, SignupState> {\n  state = {}\n\n  constructor(props: any) {\n    super(props)\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  render() {\n    return (\n      <div>\n        <Button onClick={this.handleClick} disabled={this.props.assigned}>\n          Player {this.props.name}{\" \"}\n        </Button>\n      </div>\n    )\n  }\n\n  handleClick(e: any) {\n    this.props.handleSignup(this.props.code)\n  }\n}\n\nexport default Signup\n","import React from \"react\"\nimport socketIOClient from \"socket.io-client\"\nimport Signup from \"./signup\"\nimport * as _ from \"lodash\"\nimport Button from \"react-bootstrap/Button\"\nimport Form from \"react-bootstrap/Form\"\n\nexport interface PasswordProps {}\n\nexport interface PasswordState {\n  mode: number\n  roomName: string\n  playerName: string\n  listOfNames: string[]\n  playerOrder: PlayerOrder\n  socket: any\n  assigned: boolean\n}\n\ninterface PlayerDetail {\n  code: string\n  name: string\n}\n\ninterface RoomDetail {\n  listOfNames: string[]\n  playerOrder: PlayerOrder\n}\n\ninterface PlayerOrder {\n  [key: string]: string\n}\n\nclass Password extends React.Component<PasswordProps, PasswordState> {\n  state = {\n    mode: 0,\n    roomName: \"\",\n    playerName: \"\",\n    listOfNames: [],\n    playerOrder: {},\n    assigned: false,\n    socket: socketIOClient(\n      \"http://ec2-13-229-233-146.ap-southeast-1.compute.amazonaws.com:4001/password\"\n    )\n  }\n\n  constructor(props: any) {\n    super(props)\n    this.handlePlayer = this.handlePlayer.bind(this)\n    this.handleRoom = this.handleRoom.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  render() {\n    switch (this.state.mode) {\n      case 0:\n        return this.roomEnter()\n      case 1:\n        return this.roomCreated()\n      default:\n        return\n    }\n  }\n\n  handlePlayer(event: any) {\n    this.setState({ playerName: event.target.value })\n  }\n\n  handleRoom(event: any) {\n    this.setState({ roomName: event.target.value })\n  }\n\n  handleSubmit() {\n    if (this.state.playerName === \"\" || this.state.roomName === \"\") {\n    }\n    const { socket } = this.state\n    socket.emit(\"sign up\", {\n      name: this.state.playerName,\n      room: this.state.roomName\n    })\n    socket.on(\"person joined\", (details: RoomDetail) => {\n      this.setState({\n        listOfNames: details.listOfNames,\n        playerOrder: details.playerOrder\n      })\n      console.log(details.listOfNames)\n      console.log(details.playerOrder)\n    })\n\n    socket.on(\"person order\", (details: PlayerDetail) => {\n      this.setState(prevState => ({\n        playerOrder: { ...prevState.playerOrder, [details.code]: details.name }\n      }))\n      console.log(this.state.playerOrder)\n    })\n    socket.on(\"user disconnected\", (listOfNames: string[]) => {\n      this.setState({ listOfNames: listOfNames })\n    })\n    this.setState({ mode: 1 })\n  }\n\n  private handlePerson = (code: string) => {\n    this.state.socket.emit(\"player order\", {\n      code,\n      name: this.state.playerName,\n      room: this.state.roomName\n    })\n    this.setState({ assigned: true })\n  }\n\n  private roomCreated = () => (\n    <div>\n      <h1> {this.state.roomName} </h1>\n      <div>\n        <h2>Room successfully joined</h2>\n      </div>\n      Watchers: {this.state.listOfNames}\n      <div>Waiting for other players to join...</div>\n      <Form.Label>Team 1:</Form.Label>\n      <div className=\"rows\">\n        <div className=\"row\">\n          <Signup\n            name=\"1\"\n            color=\"1\"\n            code=\"a\"\n            handleSignup={this.handlePerson}\n            assigned={this.state.assigned}\n          />\n          {_.get(this.state.playerOrder, \"a\")}\n        </div>\n\n        <div className=\"row\">\n          <Signup\n            name=\"2\"\n            color=\"1\"\n            code=\"b\"\n            handleSignup={this.handlePerson}\n            assigned={this.state.assigned}\n          />\n          {_.get(this.state.playerOrder, \"b\")}\n        </div>\n      </div>\n      <Form.Label>Team 2:</Form.Label>\n      <div className=\"rows\">\n        <div className=\"row\">\n          <Signup\n            name=\"1\"\n            color=\"2\"\n            code=\"c\"\n            handleSignup={this.handlePerson}\n            assigned={this.state.assigned}\n          />\n          {_.get(this.state.playerOrder, \"c\")}\n        </div>\n        <div className=\"row\">\n          <Signup\n            name=\"2\"\n            color=\"2\"\n            code=\"d\"\n            handleSignup={this.handlePerson}\n            assigned={this.state.assigned}\n          />\n          {_.get(this.state.playerOrder, \"d\")}\n        </div>\n      </div>\n    </div>\n  )\n\n  private roomEnter = () => (\n    <div>\n      <h1>Hi, Welcome to Password! </h1>\n      <div>\n        <div>Player Name:</div>\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={this.state.playerName}\n          onChange={this.handlePlayer}\n        />\n        <div>Room Name:</div>\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={this.state.roomName}\n          onChange={this.handleRoom}\n        />\n        <div>\n          <Button onClick={this.handleSubmit}>Create Room</Button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Password\n","import React from \"react\"\n// import logo from \"./logo.svg\"\nimport \"./App.css\"\nimport Password from \"./components/password\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nfunction App() {\n  return (\n    <Password></Password>\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n  )\n}\n\nexport default App\n","import React from \"react\";\n\nconst NotFound = () => <h1>404 Page not found</h1>;\n\nexport default NotFound;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport { Route, BrowserRouter as Router, Switch } from \"react-router-dom\"\nimport App from \"./App\"\nimport Password from \"./components/password.tsx\"\nimport NotFound from \"./components/notfound.tsx\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport \"bootstrap/dist/css/bootstrap.css\"\n\n// ReactDOM.render(<Router />, document.getElementById(\"root\"));\n\nconst routing = (\n  <Router>\n    <div>\n      <Switch>\n        <Route exact path=\"/\" component={App} />\n        <Route path=\"/password\" component={Password} />\n        <Route component={NotFound} />\n      </Switch>\n    </div>\n  </Router>\n)\n\nReactDOM.render(routing, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}